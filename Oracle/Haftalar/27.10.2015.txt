create user ebru identified by asdf1234 default tablespace users; 
alter user ebru quota 20M on users;
grant create session to ebru;
grant create table to ebru;
								-- Ebru database içine tablo oluþturduk
create table ebru.calisan(
isim varchar2(30),
soyisim varchar2(30),
ise_giris_tarihi date default sysdate
);

insert into ebru.calisan(isim,soyisim,ise_giris_tarihi)				--çalýþan tablosuna ayhan yurdaer adýnda veri ekledik
values
(
'Ayhan','yurdaer',to_date('2013-07-12','YYYY-MM-DD')
);

insert into ebru.calisan(isim,soyisim,ise_giris_tarihi)
values
(								-- Kullanýcýdan giriþli yapmamýzý saðlýyor
'&ISIM','&SOYISIM',TO_DATE('&TARIH','YYYY-MM-DD')
);

create talbe ebru.calisan_gecici
(								-- Ebru geçici diye bir tablo oluþturduk
isim varchar2(30),
soyisim varchar2(30),
ise_giris_tarihi date default sysdate
);

insert into ebru.calisan_gecici(ISIM,SOYISIM,ISE_GIRIS_TARIHI)		-- geçici tablo eklemimizi saðlýyor 
select ISIM,SOYISIM,ISE_GÝRÝS_TARÝHÝ from ebru.calisan;	

SELECT * From ebru.calisan_gecici;					-- geçici tablosunu görüntülüyor

rollback;								-- yaptýðýmýz iþlemleri geri alýyor

UPDATE ebu.calisan
set ise_giris_tarihi = TO DATE('2014-05-29','YYYY-MM-DD')			--Veriyi Güncelliyor 
WHERE ISIM='HAKAN' AND SOYISIM='ERCAN';

SELECT * FROM EBRU.CALISAN;

create table ebru.gecici1
(
calisan_adi varchar2(30) not null,
calisan_soyadi varchar2(30),
yas number(2)
);

create table ebru.gecici2
(
calisan_adi varchar2(30) not null,
calisan_soyadi varchar2(30),
yas number(2)
);

alter table ebru.gecici2 modify(calisan_adi not null);

insert into ebru.gecici2 (calisan_adi,calisan_soyadi,yas) values (null,'keser',35);	-- calisan adi boþ býrakýldýðý için hata alýyoruz

create table ebru.gecici3						-- Unique Örneði boþ býrakýlabilir
(
calisan_adi varchar2(30) not null,
calisan_soyadi varchar2(30),
yas number(2),
constraint U_Gecici3_AdSoyad
unique(calisan_adi,calisan_soyadi)
);


create table ebru.gecici4						-- Yukardakiyle ayný görevi görüyor ama yukarýda tabloya eklerken giriyoruz bunda ise sonradan
(
calisan_adi varchar2(30) not null,
calisan_soyadi varchar2(30),
yas number(2),
);

alter table ebru.gecici4					
add constraint u_gecici4_AdSoyad unique(calisan_adi,calisansoyadi);

insert into ebru.gecici4 values ('Ahmet','Demir',35);
insert into ebru.gecici4 values ('Ahmet','Demirci',35);
insert into ebru.gecici4 values ('NULL','NULL',35);
insert into ebru.gecici4 values ('NULL','NULL',35);

alter table ebru.gecici4 add constraint u_gecici4_AdSoyad unique(calisan_adi,calisan_soyadi);

select * from ebru.gecici4;


create table ebru.gecici5					-- primary key verdik unique ile farkýný görebilmemiz için
(
calisan_id number(3),
calisan_adi varchar2(30) not null,
calisan_soyadi varchar2(30),
yas number(2),
constraint pk_gecici5 primary key(calisan_id)
);


create table ebru.gecici6
(
calisan_id number(3),
calisan_adi varchar2(30) not null,
calisan_soyadi varchar2(30),
yas number(2),
);

alter table ebru.gecici6 add constraint pk_gecici6_id primary key(calisan_id)
primary key(calisan_id);
							--primary key calisan id olduðu için ayný id alamaz alýrsa çalýþmak null deðeri de alamaz unique olmasý gerekiyor null deðeri almasý için 
insert into ebru.gecici6 values(1,'Erman','Kaya',23);
insert into ebru.gecici6 values(2,'Mahmut','Unlu',22);
insert into ebru.gecici6 values(3,'Sevda','Dermenci',27);

create table ebru.bolumler					-- bölümler tablasu ekleyip primary key atadýktan sonra çalýþanlar tablosunu ekledik primary key ve foreign key leri atadýk ve deðerler girdik
(
bolum_id number(3),
bolum_adi varchar2(20),
constraint pk_bolumler_id pimary key(bolum_id)
);

create table ebru.calisanlar
(
calisan_id number(3),
calisan_adi varchar2(30),
bolum_id number(3),
constraint fk_calisanlar foreign key (bolum_id)
references ebru.bolumler(bolum_id)
);

insert into ebru.bolumler values('1','Yonetim');
insert into ebru.bolumler values('2','Ýnsan Kaynaklarý');
insert into ebru.bolumler values('3','BT');
commit;
insert into ebru.calisanlar values (100,'Ahmet',1);
insert into ebru.calisanlar values (101,'Ahmet',2);


create table ebru.ogrenci
(
Ad varchar2(20),
Soyad varchar2(20),
Cinsiyet varchar(1),
constraint C_cinsiyet check (Cinsiyet in('E','K'))
);

insert into ebru.ogrenci values ('Ahmet','Ercan','E')			-- Esra'da hata veriyor çünkü T diye bir cinsiyet tanýmlanmamýþtýr
insert into ebru.ogrenci values ('Esra','Kýzýl','T')


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Joinler:

select department_id,				-- natural join ne yaptýðý belli deðil sadece join türü olarak biline.
departmen_name,
location_id,
city
from hr.departments
natural join hr.locations;

select						-- from ile baþlayan kodu çalýþtýrýp department ve locations verilerini kýsaltýyoruz sonra içine yazýyoruz inner joinle baðlýyoruz ortak olanlarý getiriyor.
dep.department_id,
dep.department_name,
loc.location_id,
loc.city
from hr.departments dep join hr.locations loc
on (dep.location_id = loc.location_id);


select						-- from ile baþlayan kodu çalýþtýrýp hr.employees ve department verilerini kýsaltýyoruz sonra içine yazýyoruz left after join sol taraftakilerin hepsi ve sað taraftakilerle ortak olaranlarý getirir.
E.last_name,					-- "+ " dediðimizde soldakilerin hepsini getiricek saðdakilerinde ortak olanlarý getiriyoruz 
E.departments_id,
D.department_name
from hr.employees E,hr.departments D
where e.department_id = d.department_id(+)

select						-- from ile baþlayan kodu çalýþtýrýp hr.employees ve department verilerini kýsaltýyoruz sonra içine yazýyoruz left after join sol taraftakilerin hepsi ve sað taraftakilerle ortak olaranlarý getirir.
E.last_name,					-- "+ " dediðimizde soldakilerin hepsini getiricek saðdakilerinde ortak olanlarý getiriyoruz yukardakiyle ayný görevi görüyor.
E.departments_id,
D.department_name
from hr.employees E left outer join hr.departments D
on(e.department_id = d.department_id);

select						-- from ile baþlayan kodu çalýþtýrýp hr.employees ve department verilerini kýsaltýyoruz sonra içine yazýyoruz right after join sað taraftakilerin hepsi ve sol taraftakilerle ortak olaranlarý getirir.
E.last_name,					-- "+ " dediðimizde saðdakilerin hepsini getiricek soldakilerinde ortak olanlarý getiriyoruz 
E.departments_id,
D.department_name
from hr.employees E,hr.departments D
where e.department_id(+) = d.department_id;

select						-- from ile baþlayan kodu çalýþtýrýp hr.employees ve department verilerini kýsaltýyoruz sonra içine yazýyoruz right after join sað taraftakilerin hepsi ve sol taraftakilerle ortak olaranlarý getirir.
E.last_name,					-- "+ " dediðimizde saðdakilerin hepsini getiricek ssoldakilerinde ortak olanlarý getiriyoruz yukardakiyle ayný görevi görüyor.
E.departments_id,
D.department_name
from hr.employees E right outer join hr.departments D
on(e.department_id = d.department_id);


select						-- from ile baþlayan kodu çalýþtýrýp hr.employees ve department verilerini kýsaltýyoruz sonra içine yazýyoruz full after join hepsini getirir
E.last_name,					-- Hepsini getiriyor.
E.departments_id,
D.department_name
from hr.employees E full outer join hr.departments D
on(e.department_id = d.department_id);

select						-- cross join
E.last_name,					-- Eþitliði saðlamadýðý durumlarda gelir istenmeyen bir durumdur
E.departments_id,
D.department_name
from hr.employees E , hr.departments D





































						



























